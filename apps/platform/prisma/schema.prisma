generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String         @id @default(uuid())
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  clerkId                   String?        @unique
  name                      String?
  email                     String         @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  promptSymbolsLimit        Int            @default(2500)
  promptSymbolsUsed         Int            @default(0)
  promptSymbolsLimitRenewal DateTime
  analyses                  Analysis[]
  entries                   JournalEntry[]
  accounts                  Account[]
  sessions                  Session[]
}

model JournalEntry {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  content   String
  analysis  Analysis?
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, id])
}

model Analysis {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  entryId        String       @unique
  userId         String
  mood           String
  summary        String
  color          String
  sentimentScore Float        @default(0)
  negative       Boolean
  subject        String
  title          String
  entry          JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
